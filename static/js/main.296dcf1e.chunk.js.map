{"version":3,"sources":["components/Card.js","components/Input.js","components/Button.js","utils/index.js","useState/validate.js","useState/ClassComponent.js","App.js","serviceWorker.js","index.js"],"names":["styled","div","FormGroup","Label","label","StyledInput","input","Error","small","Input","type","handleChange","value","error","onChange","button","formatFormValue","JSON","stringify","values","errors","user","password","length","ClassComponent","props","handleSubmit","e","preventDefault","validate","state","formValues","setState","Object","keys","alert","Card","onSubmit","this","target","Button","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"ohBAEeA,UAAOC,IAAtB,K,mgBCCA,IAAMC,EAAYF,IAAOC,IAAV,KAITE,EAAQH,IAAOI,MAAV,KAILC,EAAcL,IAAOM,MAAV,KASXC,EAAQP,IAAOQ,MAAV,KAeIC,EAVD,SAAC,GAA+D,IAA7DL,EAA4D,EAA5DA,MAA4D,IAArDM,YAAqD,MAA9C,OAA8C,EAAtCC,EAAsC,EAAtCA,aAAsC,IAAxBC,aAAwB,MAAhB,GAAgB,EAAZC,EAAY,EAAZA,MAC/D,OACE,kBAACX,EAAD,KACE,kBAACC,EAAD,KAAQC,GACR,kBAACC,EAAD,CAAaO,MAAOA,EAAOF,KAAMA,EAAMI,SAAUH,IACjD,kBAACJ,EAAD,KAAQM,GAASA,K,oNC5BRb,UAAOe,OAAtB,KCFMC,EAAkB,SAACJ,GAAD,OAAWK,KAAKC,UAAUN,EAAO,KAAM,ICAhD,WAACO,GACd,IAAIC,EAAS,GAYb,OAVKD,EAAOE,OACVD,EAAOC,KAAO,oBAGXF,EAAOG,SAEDH,EAAOG,SAASC,OAAS,IAClCH,EAAOE,SAAW,4BAFlBF,EAAOE,SAAW,yBAKbF,G,uCC2DMI,E,kDAlEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,aAAe,SAACC,GACdA,EAAEC,iBAEF,IAAIR,EAASS,EAAS,EAAKC,MAAMC,YACjC,EAAKC,SAAL,eAAmB,EAAKF,MAAxB,CAA+BV,YAEI,IAA/Ba,OAAOC,KAAKd,GAAQG,QACtBY,MAAMnB,EAAgB,EAAKc,MAAMC,cAhBnC,EAAKD,MAAQ,CACXC,WAAY,CACVV,KAAM,GACNC,SAAU,IAEZF,OAAQ,IAPO,E,qDAsBT,IAAD,OACP,OACE,8DAEE,kBAACgB,EAAD,KACE,0BAAMC,SAAUC,KAAKZ,cACnB,kBAAC,EAAD,CACEtB,MAAO,UACPQ,MAAO0B,KAAKR,MAAMC,WAAWV,KAC7BV,aAAc,SAACgB,GAAD,OACZ,EAAKK,SAAL,eACK,EAAKF,MADV,CAEEC,WAAW,eACN,EAAKD,MAAMC,WADN,CAERV,KAAMM,EAAEY,OAAO3B,YAIrBC,MAAOyB,KAAKR,MAAMV,OAAOC,OAE3B,kBAAC,EAAD,CACEX,KAAK,WACLN,MAAO,gBACPQ,MAAO0B,KAAKR,MAAMC,WAAWT,SAC7BT,MAAOyB,KAAKR,MAAMV,OAAOE,SACzBX,aAAc,SAACgB,GAAD,OACZ,EAAKK,SAAL,eACK,EAAKF,MADV,CAEEC,WAAW,eACN,EAAKD,MAAMC,WADN,CAERT,SAAUK,EAAEY,OAAO3B,cAK3B,kBAAC4B,EAAD,mBAGJ,6BAAMxB,EAAgBsB,KAAKR,MAAMC,kB,GA7DZU,aCQdC,MARf,WACE,OACE,yBAAKC,UAAU,OACX,kBAAC,EAAD,QCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/C,GACLgD,QAAQhD,MAAMA,EAAMiD,c","file":"static/js/main.296dcf1e.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport default styled.div`\n    background-color: #FFF;\n    padding: 1.5rem;\n    margin-right: 0;\n    margin-left: 0;\n    width: 300px;\n    margin: 10px 0px;\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n`;","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst FormGroup = styled.div`\n  margin-bottom: 1rem;\n`;\n\nconst Label = styled.label`\n  margin-bottom: 0.5rem;\n`;\n\nconst StyledInput = styled.input`\n  width: 100%;\n  font-size: 1.2rem;\n  line-height: 2;\n  background-color: #fff;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n`;\n\nconst Error = styled.small`\n  color: #dc3545;\n  font-weight: 500;\n`;\n\nconst Input = ({ label, type = \"text\", handleChange, value = \"\", error }) => {\n  return (\n    <FormGroup>\n      <Label>{label}</Label>\n      <StyledInput value={value} type={type} onChange={handleChange} />\n      <Error>{error && error}</Error>\n    </FormGroup>\n  );\n};\n\nexport default Input;\n","import styled from 'styled-components';\n\nexport default styled.button`\n    background-color: #28a745;\n    border: none;\n    padding: 10px 15px;\n    font-size: 15px;\n    border-radius: 5px;\n    color: #FFF;\n`;","const formatFormValue = (value) => JSON.stringify(value, null, 1);\n\nexport { formatFormValue };\n","export default (values) => {\n  let errors = {};\n\n  if (!values.user) {\n    errors.user = \"Ingrese usuario.\";\n  }\n\n  if (!values.password) {\n    errors.password = \"Ingrese contraseña.\";\n  } else if (values.password.length < 8) {\n    errors.password = \"Contraseña muy corta.\";\n  }\n\n  return errors;\n};\n","import React, { Component } from \"react\";\nimport { Card, Input, Button } from \"../components\";\nimport { formatFormValue } from \"../utils\";\nimport validate from \"./validate\";\n\nclass ClassComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      formValues: {\n        user: \"\",\n        password: \"\",\n      },\n      errors: {},\n    };\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    let errors = validate(this.state.formValues);\n    this.setState({ ...this.state, errors });\n\n    if (Object.keys(errors).length === 0) {\n      alert(formatFormValue(this.state.formValues));\n    }\n  };\n\n  render() {\n    return (\n      <>\n        Ejemplo classComponent.\n        <Card>\n          <form onSubmit={this.handleSubmit}>\n            <Input\n              label={\"Usuario\"}\n              value={this.state.formValues.user}\n              handleChange={(e) =>\n                this.setState({\n                  ...this.state,\n                  formValues: {\n                    ...this.state.formValues,\n                    user: e.target.value,\n                  },\n                })\n              }\n              error={this.state.errors.user}\n            />\n            <Input\n              type=\"password\"\n              label={\"Contraseña\"}\n              value={this.state.formValues.password}\n              error={this.state.errors.password}\n              handleChange={(e) =>\n                this.setState({\n                  ...this.state,\n                  formValues: {\n                    ...this.state.formValues,\n                    password: e.target.value,\n                  },\n                })\n              }\n            />\n            <Button>Ingresar</Button>\n          </form>\n        </Card>\n        <pre>{formatFormValue(this.state.formValues)}</pre>\n      </>\n    );\n  }\n}\n\nexport default ClassComponent;\n","import React from \"react\";\nimport './App.css';\nimport UseStateExample from './useState/HookComponent';\nimport UseStateClassExample from './useState/ClassComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <UseStateClassExample />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}